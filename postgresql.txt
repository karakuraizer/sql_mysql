SELECT pg_size_pretty(pg_database_size(current_database())) as size;
select pg_size_pretty(pg_relation_size('table name'));

select pg_size_pretty(pg_database_size(current_database()));


SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'test'  AND pid <> pg_backend_pid();


select table_name, pg_relation_size(quote_ident(table_name))
from information_schema.tables
where table_schema = 'public'and pg_relation_size(quote_ident(table_name)) != '0' and pg_relation_size(quote_ident(table_name)) != '8192'
order by 2 DESC


SELECT usename, client_addr, backend_start, query FROM pg_stat_activity WHERE datname = 'AD_BUH';



 pg_dump -U postgres base1c | pigz > /backup/base1c.sql.gz
 

########Backup
#set PATH=%PATH%;D:\1C-PostgreSQL\10.5-24.1C\bin\;%ProgramFiles%\7-Zip
#set DAT=%date%_%TIME:~0,2%-%TIME:~3,2%-%TIME:~6,2%

pg_dump -U postgres -Z 6 -d AD_BUH | "C:\Program Files\7-Zip\7z.exe" a -si d:\%DAT%_AD_BUH.7z

pg_dump -U postgres -Z 6 -d AD_ZUP | "C:\Program Files\7-Zip\7z.exe" a -si d:\%DAT%_AD_ZUP.7z

pg_dump -U postgres -Z 6 -d AD_IP | "C:\Program Files\7-Zip\7z.exe" a -si d:\%DAT%_AD_IP.7z

########Restore

!!!!first create db in psql\pgAdmin, then restore dump, and only !after! that add new 1C db at 1C-server console!!!!


createdb -U postgres -T template0 base1c-restored

#psql -U postgres AD_BUH_restored < d:\dump		#if text dump

pg_restore -U postgres -d test <dump>


########FIX
set PATH=%PATH%;D:\1C-PostgreSQL\10.5-24.1C\bin\;%ProgramFiles%\7-Zip

vacuumdb --full --analyze -U postgres --dbname base

reindexdb -U postgres --dbname base


update pg_database set encoding = pg_char_to_encoding('UTF8') where datname = 'database_name'


##################################################cache\disk hits

SELECT round(100 * sum(blks_hit) / sum(blks_hit + blks_read), 3) as cache_hit_ratio FROM pg_stat_database;


with 
all_tables as
(
SELECT  *
FROM    (
    SELECT  'all'::text as table_name, 
        sum( (coalesce(heap_blks_read,0) + coalesce(idx_blks_read,0) + coalesce(toast_blks_read,0) + coalesce(tidx_blks_read,0)) ) as from_disk, 
        sum( (coalesce(heap_blks_hit,0)  + coalesce(idx_blks_hit,0)  + coalesce(toast_blks_hit,0)  + coalesce(tidx_blks_hit,0))  ) as from_cache    
    FROM    pg_statio_all_tables  --> change to pg_statio_USER_tables if you want to check only user tables (excluding postgres's own tables)
    ) a
WHERE   (from_disk + from_cache) > 0 -- discard tables without hits
),
tables as 
(
SELECT  *
FROM    (
    SELECT  relname as table_name, 
        ( (coalesce(heap_blks_read,0) + coalesce(idx_blks_read,0) + coalesce(toast_blks_read,0) + coalesce(tidx_blks_read,0)) ) as from_disk, 
        ( (coalesce(heap_blks_hit,0)  + coalesce(idx_blks_hit,0)  + coalesce(toast_blks_hit,0)  + coalesce(tidx_blks_hit,0))  ) as from_cache    
    FROM    pg_statio_all_tables --> change to pg_statio_USER_tables if you want to check only user tables (excluding postgres's own tables)
    ) a
WHERE   (from_disk + from_cache) > 0 -- discard tables without hits
)
SELECT  table_name as "table name",
    from_disk as "disk hits",
    round((from_disk::numeric / (from_disk + from_cache)::numeric)*100.0,2) as "% disk hits",
    round((from_cache::numeric / (from_disk + from_cache)::numeric)*100.0,2) as "% cache hits",
    (from_disk + from_cache) as "total hits"
FROM    (SELECT * FROM all_tables UNION ALL SELECT * FROM tables) a
ORDER   BY (case when table_name = 'all' then 0 else 1 end), "total hits" desc
